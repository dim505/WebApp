#pragma checksum "C:\scratch\projects\WebApp\main_portfolio\Pages\JavaScriptCalc.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "547ae4a24fbba038f95b4f8d7fb30e31a0605cb3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(razor_pages.Pages.Pages_JavaScriptCalc), @"mvc.1.0.razor-page", @"/Pages/JavaScriptCalc.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/JavaScriptCalc.cshtml", typeof(razor_pages.Pages.Pages_JavaScriptCalc), null)]
namespace razor_pages.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\scratch\projects\WebApp\main_portfolio\Pages\_ViewImports.cshtml"
using razor_pages;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"547ae4a24fbba038f95b4f8d7fb30e31a0605cb3", @"/Pages/JavaScriptCalc.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b0d45e63f997e68bd8ec1dfbd8cb9a4057c4fad5", @"/Pages/_ViewImports.cshtml")]
    public class Pages_JavaScriptCalc : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 5 "C:\scratch\projects\WebApp\main_portfolio\Pages\JavaScriptCalc.cshtml"
  
    ViewData["Title"] = "Javascript Calculator";

#line default
#line hidden
            BeginContext(115, 8094, true);
            WriteLiteral(@"


<script>
    debugger;

    $(function () {

        //gets draggable div positions fron local storage
        var sPositions = localStorage.positions || ""{}"",
            //gets positions and converts to object
            positions = JSON.parse(sPositions);
        //loops through and sets the position for div
        $.each(positions, function (id, pos) {
            $(""#"" + id).css(pos);
        });

        //targets the calculator via ID and makes it draggable
        $(""#draggable"").draggable({
            //specifies the containment DIV
            containment: ""#containment"",
            //disables scrolling inside div
            scroll: false,
            //initialed when dragging stops
            stop: function (event, ui) {
                //gets the current div position and saves it
                positions[this.id] = ui.position;
                //stores it in local storage
                localStorage.positions = JSON.stringify(positions);
            }
     ");
            WriteLiteral(@"   });
    });


    window.EqBtnPressed = 0

    //each button pressed has its own function witch adds its value to the display string
    function btn1() {
        CheckNumAfterEQ(1)
    }
    function btn2() {
        CheckNumAfterEQ(2)
    };
    function btn3() {
        CheckNumAfterEQ(3)
    };
    function btn4() {
        CheckNumAfterEQ(4)
    };
    function btn5() {
        CheckNumAfterEQ(5)
    };
    function btn6() {
        CheckNumAfterEQ(6)
    };
    function btn7() {
        CheckNumAfterEQ(7)
    };
    function btn8() {
        CheckNumAfterEQ(8)
    };
    function btn9() {
        CheckNumAfterEQ(9)
    };
    function btn0() {
        CheckNumAfterEQ(0)
    };

    function CheckNumAfterEQ(BtnPressed) {


        if ((BtnPressed == ""1"" || BtnPressed == ""2"" || BtnPressed == ""3""
            || BtnPressed == ""4"" || BtnPressed == ""5"" || BtnPressed == ""6"" || BtnPressed == ""7""
            || BtnPressed == ""8"" || BtnPressed == ""9"" || BtnPressed == ");
            WriteLiteral(@"""0"") && window.EqBtnPressed == 1) {
            document.getElementById(""display"").value = """"
            window.EqBtnPressed = 0
            document.getElementById(""display"").value += BtnPressed
        } else {
            document.getElementById(""display"").value += BtnPressed

        }



    }

    function btnMulti() {
        //gets value of current display
        var display = document.getElementById(""display"").value
        //checks to see if * was pressed when the display is blank
        if (display == """") {
            //sets default value
            display = ""0*""
            //gets the display value
            document.getElementById(""display"").value = display
        }
        //checks to see if the the operation sign was pressed mutliple times
        else if (display[display.length - 1] == ""+"" || display[display.length - 1] == ""-"" || display[display.length - 1] == ""/"" || display[display.length - 1] == ""*"") {
            //extracts the display minus the last sign p");
            WriteLiteral(@"ressed and adds the * sign incase the operation sign was pressed multiple times
            display = display.slice(0, -1) + ""*""
            //sets the displays value
            document.getElementById(""display"").value = display
            //if just a nummber, the * sign gets appended
        } else {
            document.getElementById(""display"").value += ""*""
            window.EqBtnPressed = 0
        }
    };
    function btnSub() {
        //gets value of current display
        var display = document.getElementById(""display"").value
        //checks to see if - was pressed when the display is blank
        if (display == """") {
            //sets new  default value
            display = ""0-""
            //sets display value
            document.getElementById(""display"").value = display
        }
        //checks to see if the the operation sign was pressed mutliple times
        if (display[display.length - 1] == ""+"" || display[display.length - 1] == ""-"" || display[display.length - 1");
            WriteLiteral(@"] == ""/"" || display[display.length - 1] == ""*"") {
            //extracts the display minus the last sign pressed and adds the - sign incase the operation sign was pressed BEFORE
            display = display.slice(0, -1) + ""-""
            //sets the displays value
            document.getElementById(""display"").value = display
            //if just a nummber, the * sign gets appended
        } else {
            document.getElementById(""display"").value += ""-""
            window.EqBtnPressed = 0
        }
    };
    function btnAdd() {
        //gets value of current display
        var display = document.getElementById(""display"").value
        //checks to see if - was pressed when the display is blank
        if (display == """") {
            //sets new  default value
            display = ""0+""
            //sets display value
            document.getElementById(""display"").value = display
        }
        //checks to see if the the operation sign was pressed mutliple times
        if (dis");
            WriteLiteral(@"play[display.length - 1] == ""+"" || display[display.length - 1] == ""-"" || display[display.length - 1] == ""/"" || display[display.length - 1] == ""*"") {
            //extracts the display minus the last sign pressed and adds the + sign incase the operation sign was pressed BEFORE
            display = display.slice(0, -1) + ""+""
            //sets the displays value
            document.getElementById(""display"").value = display
            //if just a nummber, the + sign gets appended
        } else {
            document.getElementById(""display"").value += ""+""
            window.EqBtnPressed = 0
        }
    };

    function btnDiv() {
        //gets value of current display
        var display = document.getElementById(""display"").value
        //checks to see if - was pressed when the display is blank
        if (display == """") {
            //sets new  default value
            display = ""0/""
            //sets display value
            document.getElementById(""display"").value = display
   ");
            WriteLiteral(@"     }

        //checks to see if the the operation sign was pressed mutliple times
        if (display[display.length - 1] == ""+"" || display[display.length - 1] == ""-"" || display[display.length - 1] == ""/"" || display[display.length - 1] == ""*"") {
            //extracts the display minus the last sign pressed and adds the - sign incase the operation sign was pressed BEFORE
            display = display.slice(0, -1) + ""/""
            //sets the displays value
            document.getElementById(""display"").value = display
        } else {
            document.getElementById(""display"").value += ""/""
            window.EqBtnPressed = 0
        }
    };

    function btnEq() {
        //display string gets evaluated
        var results = eval(document.getElementById(""display"").value)
        //returns the results
        document.getElementById(""display"").value = results
        window.EqBtnPressed = 1

    };

    function btnC() {
        //clears the display
        document.getElementB");
            WriteLiteral(@"yId(""display"").value = """"
        window.EqBtnPressed = 0
    };




</script>


<div class=""text-right"">

    <h2 class=""display-4 mb-0"">Here is my Javascript Calculator! </h2>

</div>




<div>
    <h3 class=""blockquote-footer""> This is written in Javascript, HTML, and CSS with elements of JQuery and Popper JS.  This is a client-side calculator that is draggable (Please note, the draggable option does not work on mobile devices). It also remembers the drag location even after a page refresh. All calculations are done on the client's browser. <a href=""https://github.com/dim505/WebApp/blob/master/main_portfolio/Pages/JavaScriptCalc.cshtml"" target=""_blank""> Please click here for the source code!</a> </h3>
</div>




<div id=""containment"">

    <div id=""draggable"" class=""ui-widget-content"" data-toggle=""popover"" data-placement=""top"" data-content=""DRAG ME!!"" data-trigger=""hover"">
        ");
            EndContext();
            BeginContext(8209, 2459, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "547ae4a24fbba038f95b4f8d7fb30e31a0605cb311858", async() => {
                BeginContext(8215, 2446, true);
                WriteLiteral(@"
            <div>
                <table>

                    <tr>

                        <td colspan=""4"">

                            <input name=""display"" id=""display"" value="""" disabled>

                        </td>


                    </tr>

                    <tr>

                        <td> <input type=""button"" class=""btn btn-outline-success"" value=""7"" onclick=""btn7()""></td>
                        <td> <input type=""button"" class=""btn btn-outline-success"" value=""8"" onclick=""btn8()""></td>
                        <td> <input type=""button"" class=""btn btn-outline-success"" value=""9"" onclick=""btn9()""></td>
                        <td> <input type=""button"" class=""btn btn-outline-dark"" value=""x"" onclick=""btnMulti()""></td>

                    </tr>


                    <tr>

                        <td> <input type=""button"" class=""btn btn-outline-success"" value=""4"" onclick=""btn4()""></td>
                        <td> <input type=""button"" class=""btn btn-outline-success"" val");
                WriteLiteral(@"ue=""5"" onclick=""btn5()""></td>
                        <td> <input type=""button"" class=""btn btn-outline-success"" value=""6"" onclick=""btn6()""></td>
                        <td> <input type=""button"" class=""btn btn-outline-dark"" value=""-"" onclick=""btnSub()""></td>


                    </tr>

                    <tr>



                        <td> <input type=""button"" class=""btn btn-outline-success"" value=""1"" onclick=""btn1()""></td>
                        <td> <input type=""button"" class=""btn btn-outline-success"" value=""2"" onclick=""btn2()""></td>
                        <td> <input type=""button"" class=""btn btn-outline-success"" value=""3"" onclick=""btn3()""></td>
                        <td> <input type=""button"" class=""btn btn-outline-dark"" value=""+"" onclick=""btnAdd()""></td>


                    </tr>

                    <tr>

                        <td> <input type=""button"" class=""btn btn-outline-primary"" value=""C"" onclick=""btnC()""></td>

                        <td> <input type=""button"" class");
                WriteLiteral(@"=""btn btn-outline-success"" value=""0"" onclick=""btn0()""></td>
                        <td> <input type=""button"" class=""btn btn-outline-primary"" value=""="" onclick=""btnEq()""></td>

                        <td> <input type=""button"" class=""btn btn-outline-dark"" value=""/"" onclick=""btnDiv()""></td>


                    </tr>




                </table>

            </div>




        ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(10668, 32, true);
            WriteLiteral("\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<MyApp.Namespace.JavaScriptCalcModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<MyApp.Namespace.JavaScriptCalcModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<MyApp.Namespace.JavaScriptCalcModel>)PageContext?.ViewData;
        public MyApp.Namespace.JavaScriptCalcModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
